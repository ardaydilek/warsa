// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum UserRole {
  admin
  client
}

enum TeamRole {
  owner
  standart
}

enum TeamMemberStatus {
  active
  inactive
  pending
}

enum PublishStatus {
  in_view
  reviewing
  rejected
}

enum OwnerType {
  team
  user
}

enum LandFormat {
  sale
  lease
  auction
}

enum ZoningStatus {
  zoned //imarli_arsa
  without_zoned //imarsiz_arsa
  public // kamu_arsasi
  commercial // ticari_arsa
}

model User {
  id                 String            @id @default(cuid())
  externalId         String            @unique @map("external_id")
  name               String?
  email              String            @unique
  imageUrl           String?           @map("image_url")
  bio                String?
  role               UserRole          @default(client)
  isProffesional     Boolean           @default(false) @map("is_proffesional")
  proffessional_info ProfessionalInfo?
  phoneNumber        String?           @unique @map("phone_number")
  teams              TeamMember[]
  owned_lands        Land[]            @relation("UserOwnedLands")
  owned_teams        Team[]            @relation("TeamOwner")
  saved_searches     SavedSearch[]
  favorites          Favorite[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([email], map: "users_email_idx")
}

model ProfessionalInfo {
  id        String   @id @default(cuid())
  documents String[]
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  contactInfo String?
  ownerId     String
  owner       User         @relation("TeamOwner", fields: [ownerId], references: [id])
  ownedLands  Land[]       @relation("TeamOwnedLands")
  members     TeamMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([ownerId])
}

model TeamMember {
  id     String   @id @default(cuid())
  userId String
  teamId String
  role   TeamRole
  user   User     @relation(fields: [userId], references: [id])
  team   Team     @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model Land {
  id                String        @id @default(cuid())
  format            LandFormat    @default(sale) // Satış formatı (satılık, kiralık)
  province          String // İl
  district          String // İlçe
  neighborhood      String? // Mahalle
  streetAdress      String? // Sokak adresi
  latitude          Float // Enlem
  longitude         Float // Boylam
  size              Float // Arazi büyüklüğü (m²)
  status            String // Durum (örn. müsait, satıldı)
  zoningStatus      ZoningStatus? // İmar durumu (konut alanı, ticari alan, sanayi alan, karma, tarım alanı)
  isOwner           Boolean       @default(false) // Arazi sahibi mi?
  description       String?
  landRegistryInfo  String? // Tapu bilgisi
  price             Float // Fiyat
  paymentPeriod     Float? // Ödeme periyodu
  deposit           Float? // Depozito
  legalAccess       String? // Yasal erişim
  blockNo           String? // Ada no
  zipCode           String?
  drivingDirections String? // Yol tarifi
  userId            String?
  teamId            String?
  ownerType         OwnerType
  user              User?         @relation("UserOwnedLands", fields: [userId], references: [id])
  team              Team?         @relation("TeamOwnedLands", fields: [teamId], references: [id])
  parcels           Parcel[] // Parcel Numaraları
  propertyTaxes     PropertyTax[] // Emlak vergileri -
  expenses          Expense[] // Giderler -
  utilities         Utility[] // Altyapı hizmetleri
  showings          Showing[] // Gösterimler -
  photos            Photo[] // Fotoğraflar
  videos            Video[] // Videolar
  attachments       Attachment[] // Ek dosyalar
  publishStatus     PublishStatus // Yayın durumu
  tags              Tag[] // Etiketler
  landTypes         LandType[] // Arazi tipleri (tarla, orman, mera, bağ, zeytinlik, boş arsa) -
  favorites         Favorite[] // Kullanıcın favoriye eklediği araziler

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([province])
  @@index([district])
  @@index([status])
  @@index([price])
  @@index([latitude, longitude])
  @@index([userId])
  @@index([teamId])
}

model Parcel {
  id     String @id @default(cuid())
  number String
  landId String
  land   Land   @relation(fields: [landId], references: [id])

  @@index([number])
}

model PropertyTax {
  id          String  @id @default(cuid())
  year        Int
  amount      Float
  description String?
  landId      String
  land        Land    @relation(fields: [landId], references: [id])

  @@index([year])
}

model Expense {
  id          String  @id @default(cuid())
  type        String
  amount      Float
  period      String
  description String?
  landId      String
  land        Land    @relation(fields: [landId], references: [id])

  @@index([type])
}

model Utility {
  id          String  @id @default(cuid())
  type        String
  amount      Float
  period      String
  description String?
  landId      String
  land        Land    @relation(fields: [landId], references: [id], onDelete: Cascade)

  @@index([type])
}

model Showing {
  id     String   @id @default(cuid())
  date   DateTime
  landId String
  land   Land     @relation(fields: [landId], references: [id], onDelete: Cascade)

  @@index([date])
}

model Photo {
  id      String  @id @default(cuid())
  url     String
  caption String?
  order   Int
  landId  String
  land    Land    @relation(fields: [landId], references: [id], onDelete: Cascade)
}

model Video {
  id     String @id @default(cuid())
  url    String
  landId String
  land   Land   @relation(fields: [landId], references: [id], onDelete: Cascade)
}

model Attachment {
  id     String @id @default(cuid())
  url    String
  landId String
  land   Land   @relation(fields: [landId], references: [id], onDelete: Cascade)

  @@index([landId])
}

model SavedSearch {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String?
  filters   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  landId    String
  land      Land     @relation(fields: [landId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, landId])
  @@index([userId])
  @@index([landId])
}

model LandType {
  id    String @id @default(cuid())
  name  String @unique
  lands Land[]

  @@index([name])
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  lands Land[]

  @@index([name])
}
